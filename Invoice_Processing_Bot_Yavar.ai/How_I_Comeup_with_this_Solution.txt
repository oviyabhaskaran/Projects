Upon receiving the problem statement — “Build an invoice processing bot with agent workflow” — I began by exploring various PDF extraction tools to identify the most adaptable solution for handling diverse invoice layouts.

## Tool Exploration & Insights
Evaluated tools like PDFPlumber, PyPDFLoader, LangChain’s PDF integrations, and Invoice2Data. Most relied heavily on regex or predefined templates, limiting adaptability to unseen invoice formats.

Considered InvoiceNet, a deep learning model trained on invoice layouts, but it required annotated training data and template-specific fine-tuning — impractical under time constraints.

Finalized PyMuPDF as the most robust and lightweight tool to extract raw text across varied invoice designs without predefined schemas.

## Choosing the LLM
Initially planned for GPT-4/GPT-3.5 for structuring invoice data, but due to cost restrictions and API limitations, I pivoted to Mistral AI.

Mistral's mistral-large-latest model offered free-tier access with competitive performance, which I integrated to perform extraction, validation, and summarization in a single LLM call — optimizing cost and efficiency.

## Agent-Based Design
Designed a modular three-agent architecture (Extractor, Validator, Summary) and consolidated logic into a single prompt to minimize LLM usage while preserving agentic clarity.

Developed a dynamic fallback: if PyMuPDF fails to extract text, the system automatically switches to Mistral OCR, enabling support for scanned or handwritten invoices.

## Challenges & Solutions
Scanned PDFs: PyMuPDF failed on image-based documents, so I integrated Mistral OCR, capturing structured markdown via fallback.

Currency Formatting: To enable accurate validation, I introduced INR currency normalization across supported formats (USD, EUR, etc.).

Built an interactive Streamlit UI with automatic routing, agent pipeline display, and visual feedback for scanned vs native PDFs.

